/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controllers.IvaAcredController;
import Models.PolizaDatos;
import Models.AuxIvaAcred;
import Controllers.AuxIvaAcredController;
import Controllers.ControllerAction;
import Controllers.GeneradorExcel;
import Models.Consultas;
import Models.RetencionIvaMes;
import Models.XmlDatos;
import Models.RetencionIvaPagadaMes;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author horusblack
 */
public class jfGlobal extends javax.swing.JFrame {

    private DefaultTableModel tablaIva;
    private DefaultTableModel defaultTableIva;
    private String periodo, asunto, empresa;
    private int numAnio;
    private double base_0, base_16, retencion_4, retencion_10, retencion_1067, cuotaCompensatoria, totalIva,
            total_devIva, totalAuxCred;
    private ControllerAction controllerAction;
    private IvaAcredController ivaAcred;
    private GeneradorExcel generadorExcel;
    private AuxIvaAcred auxIvaAcred;
    private List<AuxIvaAcred> listAuxIvaAcreds;
    private List<PolizaDatos> listPolizaDatos;
    private List<RetencionIvaMes> listRetencionIvaMeses;
    private List<RetencionIvaPagadaMes> listRetencionIvaPagadaMes;
    private List<XmlDatos> xmlDatosList;

    /**
     * Creates new form jfGlobal
     */
    public jfGlobal() {
        initComponents();
        preConfiguracion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_Filtro = new javax.swing.JPanel();
        calendarMes = new com.toedter.calendar.JMonthChooser();
        calendarAnio = new com.toedter.calendar.JYearChooser();
        jPanel1 = new javax.swing.JPanel();
        btnProcesarIva = new javax.swing.JButton();
        btnXmlCargar = new javax.swing.JButton();
        combo_Empresa = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        panel_contenidoGlobal = new javax.swing.JPanel();
        tp_Secciones = new javax.swing.JTabbedPane();
        panel_Det_Iva_Favor = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        panel_Cien_FIA = new javax.swing.JPanel();
        panelInfo = new javax.swing.JPanel();
        SpIva = new javax.swing.JScrollPane();
        tablaCienIvaAcred = new javax.swing.JTable();
        ScrollTotalIva = new javax.swing.JScrollPane();
        tablaTotalIva = new javax.swing.JTable();
        lb_100 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnExcelCienAcred = new javax.swing.JButton();
        panelBusquedaManual = new javax.swing.JPanel();
        PanelTabla = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_ManualCarga = new javax.swing.JTable();
        PanelAction = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnExitPanel = new javax.swing.JButton();
        panel_Aux_IA = new javax.swing.JPanel();
        panel_CabecerAuxIva = new javax.swing.JPanel();
        lbT1 = new javax.swing.JLabel();
        lbT_mesAuxIvaAcred = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        panel_dataIvaAcred = new javax.swing.JPanel();
        panel_TablaIvaAcred = new javax.swing.JPanel();
        SpIva1 = new javax.swing.JScrollPane();
        tabla_ivaAuxAcred = new javax.swing.JTable();
        panel_resultIvaAcred = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_totalAuxIvaAcred = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        btnAIA = new javax.swing.JButton();
        panel_RIM = new javax.swing.JPanel();
        panel_detRIM = new javax.swing.JPanel();
        SpIva4 = new javax.swing.JScrollPane();
        tabla_RIM = new javax.swing.JTable();
        lb_RIM = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        btnExcelRIM = new javax.swing.JButton();
        panel_RIPM = new javax.swing.JPanel();
        panel_RetIvaMes1 = new javax.swing.JPanel();
        SpIva3 = new javax.swing.JScrollPane();
        tabla_RetIvaMesPagada = new javax.swing.JTable();
        lb_RIPM = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        btnExcelRIMP = new javax.swing.JButton();
        panel_AT_16 = new javax.swing.JPanel();
        panel_AT_Cero = new javax.swing.JPanel();
        panel_RelacionDep = new javax.swing.JPanel();
        panel_AuxDep = new javax.swing.JPanel();
        panel_AuxDepositos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_AuxDepositos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel_Filtro.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Procesar/Buscar"));

        btnProcesarIva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/filter32.png"))); // NOI18N
        btnProcesarIva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcesarIvaActionPerformed(evt);
            }
        });

        btnXmlCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/difference.png"))); // NOI18N
        btnXmlCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXmlCargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnProcesarIva)
                .addGap(18, 18, 18)
                .addComponent(btnXmlCargar))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnProcesarIva)
            .addComponent(btnXmlCargar)
        );

        combo_Empresa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Asticsa", "Agroecolog√≠a" }));

        jLabel2.setText("Periodo");

        jLabel3.setText("Ejercicio");

        jLabel4.setText("Empresa");

        javax.swing.GroupLayout panel_FiltroLayout = new javax.swing.GroupLayout(panel_Filtro);
        panel_Filtro.setLayout(panel_FiltroLayout);
        panel_FiltroLayout.setHorizontalGroup(
            panel_FiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_FiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_FiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calendarMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(panel_FiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calendarAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(panel_FiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(combo_Empresa, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_FiltroLayout.setVerticalGroup(
            panel_FiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_FiltroLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(panel_FiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_FiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(combo_Empresa)
                    .addComponent(calendarAnio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(calendarMes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_FiltroLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panel_contenidoGlobal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panel_contenidoGlobal.setAutoscrolls(true);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_Det_Iva_FavorLayout = new javax.swing.GroupLayout(panel_Det_Iva_Favor);
        panel_Det_Iva_Favor.setLayout(panel_Det_Iva_FavorLayout);
        panel_Det_Iva_FavorLayout.setHorizontalGroup(
            panel_Det_Iva_FavorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_Det_Iva_FavorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(697, Short.MAX_VALUE))
        );
        panel_Det_Iva_FavorLayout.setVerticalGroup(
            panel_Det_Iva_FavorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_Det_Iva_FavorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(695, Short.MAX_VALUE))
        );

        tp_Secciones.addTab("DETERMINACION DE  IVA A FAVOR", panel_Det_Iva_Favor);

        panel_Cien_FIA.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        panelInfo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        SpIva.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tablaCienIvaAcred.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tablaCienIvaAcred.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaCienIvaAcred.setToolTipText("");
        tablaCienIvaAcred.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        SpIva.setViewportView(tablaCienIvaAcred);

        ScrollTotalIva.setBorder(javax.swing.BorderFactory.createTitledBorder("Totales"));

        tablaTotalIva.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tablaTotalIva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaTotalIva.setOpaque(false);
        ScrollTotalIva.setViewportView(tablaTotalIva);

        lb_100.setFont(new java.awt.Font("Source Code Pro", 1, 14)); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Exportar"));

        btnExcelCienAcred.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/excel32.png"))); // NOI18N
        btnExcelCienAcred.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelCienAcredActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(btnExcelCienAcred)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(btnExcelCienAcred)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelBusquedaManual.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        PanelTabla.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Encontrados"));

        tabla_ManualCarga.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla_ManualCarga);

        javax.swing.GroupLayout PanelTablaLayout = new javax.swing.GroupLayout(PanelTabla);
        PanelTabla.setLayout(PanelTablaLayout);
        PanelTablaLayout.setHorizontalGroup(
            PanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelTablaLayout.setVerticalGroup(
            PanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        PanelAction.setBorder(javax.swing.BorderFactory.createTitledBorder("Procesar/Borrar Seleccionados"));

        btnOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/confirmacion32.png"))); // NOI18N
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/borrar32.png"))); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnExitPanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/exit.png"))); // NOI18N
        btnExitPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitPanelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelActionLayout = new javax.swing.GroupLayout(PanelAction);
        PanelAction.setLayout(PanelActionLayout);
        PanelActionLayout.setHorizontalGroup(
            PanelActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelActionLayout.createSequentialGroup()
                .addComponent(btnOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExitPanel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelActionLayout.setVerticalGroup(
            PanelActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnOk)
            .addComponent(btnDelete)
            .addComponent(btnExitPanel)
        );

        javax.swing.GroupLayout panelBusquedaManualLayout = new javax.swing.GroupLayout(panelBusquedaManual);
        panelBusquedaManual.setLayout(panelBusquedaManualLayout);
        panelBusquedaManualLayout.setHorizontalGroup(
            panelBusquedaManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBusquedaManualLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelTabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelBusquedaManualLayout.setVerticalGroup(
            panelBusquedaManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBusquedaManualLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBusquedaManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PanelAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelInfoLayout = new javax.swing.GroupLayout(panelInfo);
        panelInfo.setLayout(panelInfoLayout);
        panelInfoLayout.setHorizontalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SpIva, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addGap(253, 253, 253)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ScrollTotalIva, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInfoLayout.createSequentialGroup()
                        .addComponent(lb_100, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                        .addGap(591, 591, 591))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInfoLayout.createSequentialGroup()
                        .addComponent(panelBusquedaManual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        panelInfoLayout.setVerticalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lb_100)
                .addGap(18, 18, 18)
                .addComponent(SpIva, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollTotalIva, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelBusquedaManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(169, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel_Cien_FIALayout = new javax.swing.GroupLayout(panel_Cien_FIA);
        panel_Cien_FIA.setLayout(panel_Cien_FIALayout);
        panel_Cien_FIALayout.setHorizontalGroup(
            panel_Cien_FIALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_Cien_FIALayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_Cien_FIALayout.setVerticalGroup(
            panel_Cien_FIALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_Cien_FIALayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tp_Secciones.addTab("100% FACTURAS DE IVA ACRED", panel_Cien_FIA);

        panel_CabecerAuxIva.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbT1.setFont(new java.awt.Font("Source Code Pro Medium", 1, 12)); // NOI18N
        lbT1.setText("RELACI√ìN DEL 100% DE IVA ACREDITABLE");

        lbT_mesAuxIvaAcred.setFont(new java.awt.Font("Source Code Pro Medium", 1, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Source Code Pro Medium", 1, 12)); // NOI18N
        jLabel1.setText("CUENTA 1151-001-000-000");

        javax.swing.GroupLayout panel_CabecerAuxIvaLayout = new javax.swing.GroupLayout(panel_CabecerAuxIva);
        panel_CabecerAuxIva.setLayout(panel_CabecerAuxIvaLayout);
        panel_CabecerAuxIvaLayout.setHorizontalGroup(
            panel_CabecerAuxIvaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CabecerAuxIvaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_CabecerAuxIvaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbT1)
                    .addComponent(lbT_mesAuxIvaAcred)
                    .addComponent(jLabel1))
                .addContainerGap(510, Short.MAX_VALUE))
        );
        panel_CabecerAuxIvaLayout.setVerticalGroup(
            panel_CabecerAuxIvaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CabecerAuxIvaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbT1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbT_mesAuxIvaAcred, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panel_dataIvaAcred.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        panel_TablaIvaAcred.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        SpIva1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabla_ivaAuxAcred.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tabla_ivaAuxAcred.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla_ivaAuxAcred.setToolTipText("");
        tabla_ivaAuxAcred.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla_ivaAuxAcred.setEnabled(false);
        SpIva1.setViewportView(tabla_ivaAuxAcred);

        javax.swing.GroupLayout panel_TablaIvaAcredLayout = new javax.swing.GroupLayout(panel_TablaIvaAcred);
        panel_TablaIvaAcred.setLayout(panel_TablaIvaAcredLayout);
        panel_TablaIvaAcredLayout.setHorizontalGroup(
            panel_TablaIvaAcredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 734, Short.MAX_VALUE)
            .addGroup(panel_TablaIvaAcredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel_TablaIvaAcredLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(SpIva1, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panel_TablaIvaAcredLayout.setVerticalGroup(
            panel_TablaIvaAcredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 340, Short.MAX_VALUE)
            .addGroup(panel_TablaIvaAcredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel_TablaIvaAcredLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(SpIva1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        panel_resultIvaAcred.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        table_totalAuxIvaAcred.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table_totalAuxIvaAcred.setEnabled(false);
        jScrollPane1.setViewportView(table_totalAuxIvaAcred);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Exportar"));

        btnAIA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/excel32.png"))); // NOI18N
        btnAIA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAIAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAIA)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAIA)
        );

        javax.swing.GroupLayout panel_resultIvaAcredLayout = new javax.swing.GroupLayout(panel_resultIvaAcred);
        panel_resultIvaAcred.setLayout(panel_resultIvaAcredLayout);
        panel_resultIvaAcredLayout.setHorizontalGroup(
            panel_resultIvaAcredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_resultIvaAcredLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_resultIvaAcredLayout.setVerticalGroup(
            panel_resultIvaAcredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_resultIvaAcredLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_resultIvaAcredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_resultIvaAcredLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 168, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panel_dataIvaAcredLayout = new javax.swing.GroupLayout(panel_dataIvaAcred);
        panel_dataIvaAcred.setLayout(panel_dataIvaAcredLayout);
        panel_dataIvaAcredLayout.setHorizontalGroup(
            panel_dataIvaAcredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_dataIvaAcredLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_dataIvaAcredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_TablaIvaAcred, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_resultIvaAcred, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_dataIvaAcredLayout.setVerticalGroup(
            panel_dataIvaAcredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_dataIvaAcredLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_TablaIvaAcred, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel_resultIvaAcred, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panel_Aux_IALayout = new javax.swing.GroupLayout(panel_Aux_IA);
        panel_Aux_IA.setLayout(panel_Aux_IALayout);
        panel_Aux_IALayout.setHorizontalGroup(
            panel_Aux_IALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_Aux_IALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_Aux_IALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panel_dataIvaAcred, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_CabecerAuxIva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_Aux_IALayout.setVerticalGroup(
            panel_Aux_IALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_Aux_IALayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_CabecerAuxIva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel_dataIvaAcred, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tp_Secciones.addTab("AUXILIAR IVA ACREDITABLE", panel_Aux_IA);

        panel_detRIM.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        SpIva4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabla_RIM.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tabla_RIM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla_RIM.setToolTipText("");
        tabla_RIM.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla_RIM.setEnabled(false);
        SpIva4.setViewportView(tabla_RIM);

        lb_RIM.setFont(new java.awt.Font("Source Code Pro Medium", 1, 14)); // NOI18N

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Exportar"));

        btnExcelRIM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/excel32.png"))); // NOI18N
        btnExcelRIM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelRIMActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnExcelRIM)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnExcelRIM)
        );

        javax.swing.GroupLayout panel_detRIMLayout = new javax.swing.GroupLayout(panel_detRIM);
        panel_detRIM.setLayout(panel_detRIMLayout);
        panel_detRIMLayout.setHorizontalGroup(
            panel_detRIMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_detRIMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_detRIMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SpIva4, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                    .addGroup(panel_detRIMLayout.createSequentialGroup()
                        .addGroup(panel_detRIMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lb_RIM)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_detRIMLayout.setVerticalGroup(
            panel_detRIMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_detRIMLayout.createSequentialGroup()
                .addComponent(lb_RIM, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpIva4, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout panel_RIMLayout = new javax.swing.GroupLayout(panel_RIM);
        panel_RIM.setLayout(panel_RIMLayout);
        panel_RIMLayout.setHorizontalGroup(
            panel_RIMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_RIMLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_detRIM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_RIMLayout.setVerticalGroup(
            panel_RIMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_RIMLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_detRIM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tp_Secciones.addTab("RENTENCIONES DE IVA DEL MES", panel_RIM);

        panel_RetIvaMes1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        SpIva3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabla_RetIvaMesPagada.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tabla_RetIvaMesPagada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla_RetIvaMesPagada.setToolTipText("");
        tabla_RetIvaMesPagada.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla_RetIvaMesPagada.setEnabled(false);
        SpIva3.setViewportView(tabla_RetIvaMesPagada);

        lb_RIPM.setFont(new java.awt.Font("Source Code Pro Medium", 1, 14)); // NOI18N

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Exportar"));

        btnExcelRIMP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/excel32.png"))); // NOI18N
        btnExcelRIMP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelRIMPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnExcelRIMP)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnExcelRIMP)
        );

        javax.swing.GroupLayout panel_RetIvaMes1Layout = new javax.swing.GroupLayout(panel_RetIvaMes1);
        panel_RetIvaMes1.setLayout(panel_RetIvaMes1Layout);
        panel_RetIvaMes1Layout.setHorizontalGroup(
            panel_RetIvaMes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_RetIvaMes1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_RetIvaMes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SpIva3, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                    .addGroup(panel_RetIvaMes1Layout.createSequentialGroup()
                        .addGroup(panel_RetIvaMes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lb_RIPM)
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_RetIvaMes1Layout.setVerticalGroup(
            panel_RetIvaMes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_RetIvaMes1Layout.createSequentialGroup()
                .addComponent(lb_RIPM, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpIva3, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout panel_RIPMLayout = new javax.swing.GroupLayout(panel_RIPM);
        panel_RIPM.setLayout(panel_RIPMLayout);
        panel_RIPMLayout.setHorizontalGroup(
            panel_RIPMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_RIPMLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_RetIvaMes1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_RIPMLayout.setVerticalGroup(
            panel_RIPMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_RIPMLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_RetIvaMes1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tp_Secciones.addTab("RET DE IVA PAGADAS EN EL MES", panel_RIPM);

        javax.swing.GroupLayout panel_AT_16Layout = new javax.swing.GroupLayout(panel_AT_16);
        panel_AT_16.setLayout(panel_AT_16Layout);
        panel_AT_16Layout.setHorizontalGroup(
            panel_AT_16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 782, Short.MAX_VALUE)
        );
        panel_AT_16Layout.setVerticalGroup(
            panel_AT_16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
        );

        tp_Secciones.addTab("ACTOS TASA 16%", panel_AT_16);

        javax.swing.GroupLayout panel_AT_CeroLayout = new javax.swing.GroupLayout(panel_AT_Cero);
        panel_AT_Cero.setLayout(panel_AT_CeroLayout);
        panel_AT_CeroLayout.setHorizontalGroup(
            panel_AT_CeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 782, Short.MAX_VALUE)
        );
        panel_AT_CeroLayout.setVerticalGroup(
            panel_AT_CeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
        );

        tp_Secciones.addTab("ACTOS TASA 0%", panel_AT_Cero);

        javax.swing.GroupLayout panel_RelacionDepLayout = new javax.swing.GroupLayout(panel_RelacionDep);
        panel_RelacionDep.setLayout(panel_RelacionDepLayout);
        panel_RelacionDepLayout.setHorizontalGroup(
            panel_RelacionDepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 782, Short.MAX_VALUE)
        );
        panel_RelacionDepLayout.setVerticalGroup(
            panel_RelacionDepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
        );

        tp_Secciones.addTab("RELACION DEPOSITOS", panel_RelacionDep);

        panel_AuxDepositos.setBorder(javax.swing.BorderFactory.createTitledBorder("INTEGRACI√ìN DE DEPOSITOS BANCARIOS"));

        tabla_AuxDepositos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabla_AuxDepositos);

        javax.swing.GroupLayout panel_AuxDepositosLayout = new javax.swing.GroupLayout(panel_AuxDepositos);
        panel_AuxDepositos.setLayout(panel_AuxDepositosLayout);
        panel_AuxDepositosLayout.setHorizontalGroup(
            panel_AuxDepositosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_AuxDepositosLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_AuxDepositosLayout.setVerticalGroup(
            panel_AuxDepositosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_AuxDepositosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panel_AuxDepLayout = new javax.swing.GroupLayout(panel_AuxDep);
        panel_AuxDep.setLayout(panel_AuxDepLayout);
        panel_AuxDepLayout.setHorizontalGroup(
            panel_AuxDepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_AuxDepLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_AuxDepositos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_AuxDepLayout.setVerticalGroup(
            panel_AuxDepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_AuxDepLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_AuxDepositos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(485, Short.MAX_VALUE))
        );

        tp_Secciones.addTab("AUXILIAR  DE DEPOSITOS", panel_AuxDep);

        javax.swing.GroupLayout panel_contenidoGlobalLayout = new javax.swing.GroupLayout(panel_contenidoGlobal);
        panel_contenidoGlobal.setLayout(panel_contenidoGlobalLayout);
        panel_contenidoGlobalLayout.setHorizontalGroup(
            panel_contenidoGlobalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_contenidoGlobalLayout.createSequentialGroup()
                .addComponent(tp_Secciones)
                .addContainerGap())
        );
        panel_contenidoGlobalLayout.setVerticalGroup(
            panel_contenidoGlobalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_contenidoGlobalLayout.createSequentialGroup()
                .addComponent(tp_Secciones, javax.swing.GroupLayout.PREFERRED_SIZE, 769, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_contenidoGlobal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_Filtro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(panel_Filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_contenidoGlobal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAIAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAIAActionPerformed
        if (tabla_ivaAuxAcred.getRowCount() > 0) {
            generadorExcel = new GeneradorExcel();
            generadorExcel.generarExcelAuxiliarIvaAcred(tabla_ivaAuxAcred, table_totalAuxIvaAcred, "AUXILIAR IVA A CRED", periodo.toUpperCase(), String.valueOf(numAnio));
        } else {
            JOptionPane.showMessageDialog(this, "No existen registros para exportar");
        }

    }//GEN-LAST:event_btnAIAActionPerformed

    private void btnExcelCienAcredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelCienAcredActionPerformed
        generadorExcel = new GeneradorExcel();
        if (tablaCienIvaAcred.getRowCount() > 0) {
            if (periodo != null && String.valueOf(numAnio) != null) {
                generadorExcel.generarExcelCienIvaAcred(
                        tablaCienIvaAcred,
                        tablaTotalIva,
                        "100% FACTURAS DE IVA ACRED",
                        periodo.toUpperCase(),
                        String.valueOf(numAnio));
            } else {
                generadorExcel.generarExcelCienIvaAcred(
                        tablaCienIvaAcred,
                        tablaTotalIva,
                        "100% FACTURAS DE IVA ACRED",
                        "(PERIODO: )",
                        "(A√ëO: )");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No existen registros para exportar");
        }

    }//GEN-LAST:event_btnExcelCienAcredActionPerformed

    private void btnExcelRIMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelRIMActionPerformed
        if (tabla_RIM.getRowCount() > 0) {
            generadorExcel = new GeneradorExcel();
            generadorExcel.generarExcelIvaRetenidoMesDetalle(tabla_RIM, "RENTENCIONES DE IVA DEL MES", periodo.toUpperCase(), String.valueOf(numAnio));
        } else {
            JOptionPane.showMessageDialog(this, "No existen registros para exportar");
        }
    }//GEN-LAST:event_btnExcelRIMActionPerformed

    private void btnExcelRIMPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelRIMPActionPerformed
        if (tabla_RetIvaMesPagada.getRowCount() > 0) {
            generadorExcel = new GeneradorExcel();
            generadorExcel.generarExcelIvaRetenidoMesPagado(tabla_RetIvaMesPagada, "RET DE IVA PAGADAS EN EL MES", periodo.toUpperCase(), String.valueOf(numAnio));
        } else {
            JOptionPane.showMessageDialog(this, "No existen registros para exportar");
        }

    }//GEN-LAST:event_btnExcelRIMPActionPerformed

    private void btnProcesarIvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcesarIvaActionPerformed
        //XML DATOS
        int numEmpresa = combo_Empresa.getSelectedIndex();
        //0 y 1
        int intNumMes = calendarMes.getMonth();
        int intNumYear = calendarAnio.getYear();
        String[] numeroMes = {"01 Enero", "02 Febrero", "03 Marzo", "04 Abril", "05 Mayo", "06 Junio", "07 Julio", "08 Agosto", "09 Septiembre", "10 Octubre",
            "11 Noviembre", "12 Diciembre"};
        String[] nombreDelMes = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre",
            "Noviembre", "Diciembre"};

        String urlMes = numeroMes[intNumMes];
        periodo = nombreDelMes[intNumMes];
        numAnio = intNumYear;
        tablaCienIvaAcred.removeAll();
        //Inicializar Tabla 100 Iva Acred
        JOptionPane.showMessageDialog(this, "El proceso puede tardar unos momentos. \n Por favor espere...");
        inicializarTablaCienIvaAcred(urlMes, periodo, intNumMes, intNumYear, numEmpresa);
        //Inicializar Tabla Auxiliar Iva Acred
        inicializarAuxIvaAcred(nombreDelMes[intNumMes], intNumMes, intNumYear, numEmpresa);
        inicializarTablaTotalAuxAcred(nombreDelMes[intNumMes], intNumYear, totalAuxCred);
        //Inicializar Tabla RetencionIvaMes
        inicializarTablaRetencionIvaMes(nombreDelMes[intNumMes], intNumMes, intNumYear, numEmpresa);
        //Inicializar Tabla RetencionIvaMesPagadas
        inicializarTablaRetencionIvaMesPagadas(nombreDelMes[intNumMes], intNumMes, intNumYear, numEmpresa);
        JOptionPane.showMessageDialog(this, "Proceso terminado");
    }//GEN-LAST:event_btnProcesarIvaActionPerformed

    private void btnXmlCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXmlCargarActionPerformed

        JFileChooser selectorCarpetaXml = new JFileChooser();
        selectorCarpetaXml.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int resultado = selectorCarpetaXml.showOpenDialog(this);
        if (resultado == 0) {
            File carpetaSeleccionada = selectorCarpetaXml.getSelectedFile();
            String rutaCarpeta = carpetaSeleccionada.getAbsolutePath();
            ivaAcred = new IvaAcredController();
            xmlDatosList = ivaAcred.listDatosXmlCienAcred(rutaCarpeta);
            if (xmlDatosList.size() > 0) {
                panelBusquedaManual.setVisible(true);
                btnOk.setEnabled(true);
                btnDelete.setEnabled(true);
                setTablaSeleccionManual(xmlDatosList);
            } else {

                JOptionPane.showMessageDialog(this, "No existen documentos XML validos dentro de la carpeta seleccionada");
            }
        }
    }//GEN-LAST:event_btnXmlCargarActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int numFilas = tabla_ManualCarga.getModel().getColumnCount();
        DefaultTableModel dtm = (DefaultTableModel) tabla_ManualCarga.getModel();
        for (int i = 0; i <= numFilas; i++) {
            try {
                if (tabla_ManualCarga.getValueAt(i, 0).toString().equals("true")) {
                    dtm.removeRow(i);
                }
            } catch (ArrayIndexOutOfBoundsException ex) {

            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        //PENDIENTE OBTENER TODOS LOS DATOS Y PASARLOS A OTRA VISTA

        xmlDatosList = new ArrayList<>();

        for (int i = 0; i < tabla_ManualCarga.getRowCount(); i++) {
            /*
            "Marcar", "Fecha de Factura", "Folio Factura", "Folio UUID", "Proveedor", "RFC", "Concepto",
            "Base 0%", "Base 16%", "Retencion 4%", "Retencion 10%","Cuota compensatoria" ,"Forma de Pago", "Acci√≥n"
             */
            XmlDatos xmlDatos = new XmlDatos();
            //Fecha de factura
            xmlDatos.setFechaFactura(tabla_ManualCarga.getValueAt(i, 1).toString());
            //Folio de factura
            xmlDatos.setFolioInterno(tabla_ManualCarga.getValueAt(i, 2).toString());
            //Folio UUID
            xmlDatos.setFolioFiscal(tabla_ManualCarga.getValueAt(i, 3).toString());
            //Proveedor
            xmlDatos.setProveedor((tabla_ManualCarga.getValueAt(i, 4).toString()));
            //RFC
            xmlDatos.setRfc((tabla_ManualCarga.getValueAt(i, 5).toString()));
            //Concepto
            xmlDatos.setConceptoXml(tabla_ManualCarga.getValueAt(i, 6).toString());
            //Base 0
            xmlDatos.setBaseCero(tabla_ManualCarga.getValueAt(i, 7).toString());
            //base 16
            xmlDatos.setBase16(tabla_ManualCarga.getValueAt(i, 8).toString());
            //ret 4
            xmlDatos.setRetencionCuatro(tabla_ManualCarga.getValueAt(i, 9).toString());
            //ret 10
            xmlDatos.setRetencionDiez(tabla_ManualCarga.getValueAt(i, 10).toString());
            //ret 1016
            xmlDatos.setRetencion1016((tabla_ManualCarga.getValueAt(i, 11).toString()));
            //ret cuota
            xmlDatos.setCuotaCompensatoria((tabla_ManualCarga.getValueAt(i, 12).toString()));
            //ret IVa
            xmlDatos.setIva((tabla_ManualCarga.getValueAt(i, 13).toString()));
            //ret total
            xmlDatos.setTotal((tabla_ManualCarga.getValueAt(i, 14).toString()));
            //forma de pago
            xmlDatos.setFormaPago((tabla_ManualCarga.getValueAt(i, 15).toString()));
            xmlDatosList.add(xmlDatos);
            //Si no se pueden sacar los datos, traer la tabla aqui
        }
        inicializarTablaCienIvaAcredDesdeSeleccion_nueva(xmlDatosList);

    }//GEN-LAST:event_btnOkActionPerformed

    private void btnExitPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitPanelActionPerformed
        tabla_ManualCarga.removeAll();
        panelBusquedaManual.setVisible(false);
    }//GEN-LAST:event_btnExitPanelActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Consultas cn = new Consultas();

        cn.polizasPeriodoEjercicio_Agroecologia(1, 2018, "111500700100000000003", 2, "COI80Empre2");
    }//GEN-LAST:event_jButton1ActionPerformed

    /*
    ################INICIA###################
    Funciones: 100% iva acred
     */
    /**
     * Metodo que obtiene y maqueta la tabla de devolucion de Iva (Final)
     *
     * @param numMes
     * @param nombreMes
     * @param mes
     * @param anio
     * @param numEmpresa
     */
    private void inicializarTablaCienIvaAcred(String numMes, String nombreMes, int mes, int anio, int numEmpresa) {
        ivaAcred = new IvaAcredController();
        List<XmlDatos> llenarDatosTabla = new ArrayList<>();
        listPolizaDatos = new ArrayList<>();
        //retornando una lista de poliza de datos
        listPolizaDatos = ivaAcred.solicitudPolizaDatos(mes, anio, numEmpresa);
        String ultimaRuta = "";
        String op[] = {"Masculino", "Femenino"};

        JComboBox sexo = new JComboBox(op);

        if (!listPolizaDatos.isEmpty()) {
            //Titulos para la tabla
            String[] titulos = {"Selecci√≥n", "Fecha de Factura", "Folio Factura", "Folio UUID", "Proveedor", "RFC", "Concepto", "Base 0%",
                "Base 16%", "Retencion 4%", "Retencion 10%", "Retencion 10.67%", "Cuota Compensatoria", "IVA", "Total", "Fecha de Pago",
                "Cuenta de Banco", "Forma de Pago", "Tipo Poliza", "No. Poliza", "Relaci√≥n con Actividad", "Cruce Edo. Cuenta"};
            //Clase que obtiene los datos xml
            //correguir sintaxis de ruta, la conexion sql es estable
            String URL_Lx = "/home/horusblack/Documentos/Macktronica/Dac Simulacion/" + anio + "/" + numMes;
            String urlDac = "\\\\25.62.86.238\\dacaspel\\Documentos digitales\\" + ultimaRuta;
            //Lista de objetos xmlDatos 
            llenarDatosTabla = ivaAcred.listDatosXmlCienAcred_List(listPolizaDatos);
            Object[][] myData = new Object[llenarDatosTabla.size()][22];
            //Datos para los totales
            base_0 = 0;
            base_16 = 0;
            retencion_4 = 0;
            retencion_10 = 0;
            retencion_1067 = 0;
            cuotaCompensatoria = 0;
            totalIva = 0;
            total_devIva = 0;

            double do_text1, do_text2, do_text3, do_text4, do_text5, do_text6, do_text7, do_text8;

            //Solicitud datos BD
            //checar esta validacion
            if (!llenarDatosTabla.isEmpty()) {
                //llenando la tabla de la info
                for (int i = 0; i < llenarDatosTabla.size(); i++) {

                    String string = llenarDatosTabla.get(i).getFechaFactura();
                    String[] parts = string.split("T");
                    String part1 = parts[0];
                    String dateFormat = "";
                    String fechaPago = "";
                    //No se estan cargando todos los datos
                    try {
                        Date date = new SimpleDateFormat("yyyy-MM-dd").parse(part1);
                        dateFormat = new SimpleDateFormat("dd-MM-yyyy").format(date);
                        //la fecha puede tener un problema
                        date = new SimpleDateFormat("yyyy-MM-dd").parse(llenarDatosTabla.get(i).getFechaPago());
                        fechaPago = new SimpleDateFormat("dd-MM-yyyy").format(date);

                    } catch (ParseException ex) {
                        JOptionPane.showMessageDialog(this, "Hubo un problema al cargar la fecha: " + ex);
                    }

                    /*
                String[] titulos = {" "Relaci√≥n con Actividad","Cruce Edo. Cuenta"};
                     */
//            
                    myData[i][0] = true;
                    myData[i][1] = dateFormat;
                    myData[i][2] = llenarDatosTabla.get(i).getFolioInterno();
                    myData[i][3] = llenarDatosTabla.get(i).getFolioFiscal();
                    myData[i][4] = llenarDatosTabla.get(i).getProveedor();
                    myData[i][5] = llenarDatosTabla.get(i).getRfc();
                    myData[i][6] = llenarDatosTabla.get(i).getConceptoXml();
                    myData[i][7] = llenarDatosTabla.get(i).getBaseCero();
                    myData[i][8] = llenarDatosTabla.get(i).getBase16();
                    myData[i][9] = llenarDatosTabla.get(i).getRetencionCuatro();
                    myData[i][10] = llenarDatosTabla.get(i).getRetencionDiez();
                    myData[i][11] = llenarDatosTabla.get(i).getRetencion1016();
                    myData[i][12] = llenarDatosTabla.get(i).getCuotaCompensatoria();
                    myData[i][13] = llenarDatosTabla.get(i).getIva();
                    myData[i][14] = llenarDatosTabla.get(i).getTotal();
                    myData[i][15] = fechaPago;
                    myData[i][16] = llenarDatosTabla.get(i).getCuenta();
                    myData[i][17] = llenarDatosTabla.get(i).getFormaPago();
                    myData[i][18] = llenarDatosTabla.get(i).getTipoPoliza();
                    myData[i][19] = llenarDatosTabla.get(i).getNumeroPoliza();
                    myData[i][21] = "";
                    //Para el total
                    //0.00, null, ""
                    try {
                        do_text1 = (llenarDatosTabla.get(i).getBaseCero().equals("") || llenarDatosTabla.get(i).getBaseCero().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getBaseCero());

                    } catch (NullPointerException e) {
                        do_text1 = 0;
                    }
                    base_0 += do_text1;
                    try {
                        do_text2 = (llenarDatosTabla.get(i).getBase16().equals("") || llenarDatosTabla.get(i).getBase16().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getBase16());
                    } catch (NullPointerException e) {
                        do_text2 = 0;
                    }
                    base_16 += do_text2;
                    try {
                        do_text3 = (llenarDatosTabla.get(i).getRetencionCuatro().equals("") || llenarDatosTabla.get(i).getRetencionCuatro().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getRetencionCuatro());
                    } catch (NullPointerException e) {
                        do_text3 = 0;
                    }
                    retencion_4 += do_text3;
                    try {
                        do_text4 = (llenarDatosTabla.get(i).getRetencionDiez().equals("") || llenarDatosTabla.get(i).getRetencionDiez().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getRetencionDiez());
                    } catch (NullPointerException e) {
                        do_text4 = 0;
                    }
                    retencion_10 += do_text4;
                    try {
                        do_text5 = (llenarDatosTabla.get(i).getRetencion1016().equals("") || llenarDatosTabla.get(i).getRetencion1016().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getRetencion1016());
                    } catch (NullPointerException e) {
                        do_text5 = 0;
                    }
                    retencion_1067 += do_text5;
                    try {
                        do_text6 = (llenarDatosTabla.get(i).getIva().equals("") || llenarDatosTabla.get(i).getIva().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getIva());
                    } catch (NullPointerException e) {
                        do_text6 = 0;
                    }
                    totalIva += do_text6;
                    try {
                        do_text7 = (llenarDatosTabla.get(i).getCuotaCompensatoria().equals("") || llenarDatosTabla.get(i).getCuotaCompensatoria().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getCuotaCompensatoria());
                    } catch (NullPointerException e) {
                        do_text7 = 0;
                    }
                    cuotaCompensatoria += do_text7;
                    try {
                        do_text8 = (llenarDatosTabla.get(i).getTotal().equals("") || llenarDatosTabla.get(i).getTotal().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getTotal());
                    } catch (NullPointerException e) {
                        do_text8 = 0;
                    }
                    total_devIva += do_text8;
                }

                tablaIva = new DefaultTableModel(myData, titulos) {
                    @Override
                    public Class<?> getColumnClass(int column) { //DETERMINA SI LA COLUMNA SER√Å CHECKBOX (BOOLEAN) O TEXTO (STRING)
                        if (column == 0) {
                            return Boolean.class;
                        } else {
                            return String.class;
                        }
                    }

                    @Override
                    public boolean isCellEditable(int row, int column) { //DETERMINA SI LA COLUMNA SE PODR√Å EDITAR
                        if (column == 0 || column == 20 || column == 21) { //NUMEROS DE COLUMNAS EMPEZANDO DESDE 0 QUE PODR√ÅN SER EDITADAS
                            return true;
                        } else {
                            return false;
                        }
                    }
                };

                //Codigo que da la habilidad de ordenar los datos filtrados por orden seg√∫n lo quiera el cliente
                TableRowSorter<TableModel> ordenTabla = new TableRowSorter<>(tablaIva);

                tablaCienIvaAcred.setModel(tablaIva);
                tablaCienIvaAcred.setRowSorter(ordenTabla);
                comboBoxColuma_relacion(tablaCienIvaAcred, tablaCienIvaAcred.getColumnModel().getColumn(20),
                        numEmpresa);
                //comboBoxColumaCruceCta(tablaCienIvaAcred, tablaCienIvaAcred.getColumnModel().getColumn(21));
                //Codigo que permite cambiar el tama√±o de las columnas de una tabla seg√∫n se requiera
                TableColumn columna;
                for (int i = 1; i <= 21; i++) {
                    switch (i) {
                        case 1:
                            //Fecha de Factura
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(130);
                            break;
                        case 2:
                            //Folio Factura
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(90);
                            break;
                        case 3:
                            //Folio UUID
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(250);
                            break;
                        case 4:
                            //Proveedor
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(400);
                            break;
                        case 5:
                            //RFC
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(120);
                            break;
                        case 6:
                            //Conceptos
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(500);
                            break;
                        case 7:
                            //Base 0%
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(60);
                            break;
                        case 8:
                            //BASE 16
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(70);
                            break;
                        case 9:
                            //Retencion 4%
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(70);
                            break;
                        case 10:
                            //Retencion 10%
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(70);
                            break;

                        case 11:
                            //Retencion 10.67%
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(150);
                            break;
                        case 12:
                            //CP
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(200);
                            break;
                        case 13:
                            //IVA
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(150);
                            break;
                        case 14:
                            //TOTAL
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(80);
                            break;
                        case 15:
                            //Fecha Pago
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(150);
                            break;
                        case 16:
                            //Cuenta de banco
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(200);
                            break;
                        case 17:
                            //Forma de Pago
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(120);
                            break;
                        case 18:
                            //Tipo Poliza
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(100);
                            break;
                        case 19:
                            //No. Poliza
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(80);
                            break;
                        case 20:
                            //Relacion de actividad
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(150);
                            break;
                        case 21:
                            //Cruce Edo Cuenta
                            columna = tablaCienIvaAcred.getColumn(titulos[i]);
                            columna.setMinWidth(150);
                            break;

                        default:
                            break;
                    }

                }
                lb_100.setText("100% FACTURAS DE IVA ACREDITABLE: " + nombreMes.toUpperCase() + " " + anio);
                inicializarTablaTotalIva(base_0, base_16, retencion_4, retencion_10, retencion_1067, cuotaCompensatoria, totalIva, total_devIva);
            } else {
                JOptionPane.showMessageDialog(this, "No se pudieron procesar los ficheros XML. \n Verifique sus permisos de acceso o la ruta de \n  los ficheros XML.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se encontraron registros para procesar en el periodo " + nombreMes + " " + anio);
        }

    }

    /**
     * Funci√≥n que llena una tabla con los resultados obtenidos de una busqueda
     * manual de archivos XML validos
     *
     * @param listSelectManual
     */
    private void inicializarTablaCienIvaAcredDesdeSeleccion_nueva(List<XmlDatos> listSelectManual) {

        tablaCienIvaAcred.removeAll();
        //Titulos para la tabla
        //Correguir titulos

        String[] titulos = {"Selecci√≥n", "Fecha de Factura", "Folio Factura", "Folio UUID", "Proveedor", "RFC", "Concepto", "Base 0%", "Base 16%", "Retencion 4%",
            "Retencion 10%", "Retencion 10.67%", "Cuota Compensatoria", "IVA", "Total", "Fecha de Pago", "Cuenta de Banco", "Forma de Pago", "Tipo Poliza",
            "No. Poliza", "Relaci√≥n con Actividad", "Cruce Edo. Cuenta"};
        //Ingresando titulos
//        tablaIva.setColumnIdentifiers(titulos);
        //Lista de objetos xmlDatos

        List<XmlDatos> llenarDatosTabla = listSelectManual;
        Object[][] myData = new Object[llenarDatosTabla.size()][22];
        //Solicitud datos BD
        base_0 = 0;
        base_16 = 0;
        retencion_4 = 0;
        retencion_10 = 0;
        retencion_1067 = 0;
        cuotaCompensatoria = 0;
        totalIva = 0;
        total_devIva = 0;

        double do_text1, do_text2, do_text3, do_text4, do_text5, do_text6, do_text7, do_text8;
        //checar esta validacion
        if (!llenarDatosTabla.isEmpty()) {
            //llenando la tabla de la info

            for (int i = 0; i < llenarDatosTabla.size(); i++) {

                myData[i][0] = false;
                myData[i][1] = llenarDatosTabla.get(i).getFechaFactura();
                myData[i][2] = llenarDatosTabla.get(i).getFolioInterno();
                myData[i][3] = llenarDatosTabla.get(i).getFolioFiscal();
                myData[i][4] = llenarDatosTabla.get(i).getProveedor();
                myData[i][5] = llenarDatosTabla.get(i).getRfc();
                myData[i][6] = llenarDatosTabla.get(i).getConceptoXml();
                myData[i][7] = llenarDatosTabla.get(i).getBaseCero();
                myData[i][8] = llenarDatosTabla.get(i).getBase16();
                myData[i][9] = llenarDatosTabla.get(i).getRetencionCuatro();
                myData[i][10] = llenarDatosTabla.get(i).getRetencionDiez();
                myData[i][11] = llenarDatosTabla.get(i).getRetencion1016();
                myData[i][12] = llenarDatosTabla.get(i).getCuotaCompensatoria();
                myData[i][13] = llenarDatosTabla.get(i).getIva();
                myData[i][14] = llenarDatosTabla.get(i).getTotal();
                myData[i][15] = "Fecha de Pago";
                myData[i][16] = "Cuenta de Banco";
                myData[i][17] = llenarDatosTabla.get(i).getFormaPago();
                myData[i][18] = "Tipo de Poliza";
                myData[i][19] = "No. Poliza";
                myData[i][20] = "Relaci√≥n con Actividad";
                myData[i][21] = "Cruce Edo. Cuenta";

                if (i != 0) {

                    try {
                        do_text1 = (llenarDatosTabla.get(i).getBaseCero().equals("") || llenarDatosTabla.get(i).getBaseCero().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getBaseCero());

                    } catch (NullPointerException e) {
                        do_text1 = 0;
                    }
                    base_0 += do_text1;
                    try {
                        do_text2 = (llenarDatosTabla.get(i).getBase16().equals("") || llenarDatosTabla.get(i).getBase16().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getBase16());
                    } catch (NullPointerException e) {
                        do_text2 = 0;
                    }
                    base_16 += do_text2;
                    try {
                        do_text3 = (llenarDatosTabla.get(i).getRetencionCuatro().equals("") || llenarDatosTabla.get(i).getRetencionCuatro().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getRetencionCuatro());
                    } catch (NullPointerException e) {
                        do_text3 = 0;
                    }
                    retencion_4 += do_text3;
                    try {
                        do_text4 = (llenarDatosTabla.get(i).getRetencionDiez().equals("") || llenarDatosTabla.get(i).getRetencionDiez().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getRetencionDiez());
                    } catch (NullPointerException e) {
                        do_text4 = 0;
                    }
                    retencion_10 += do_text4;
                    try {
                        do_text5 = (llenarDatosTabla.get(i).getRetencion1016().equals("") || llenarDatosTabla.get(i).getRetencion1016().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getRetencion1016());
                    } catch (NullPointerException e) {
                        do_text5 = 0;
                    }
                    retencion_1067 += do_text5;
                    try {
                        do_text6 = (llenarDatosTabla.get(i).getIva().equals("") || llenarDatosTabla.get(i).getIva().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getIva());
                    } catch (NullPointerException e) {
                        do_text6 = 0;
                    }
                    totalIva += do_text6;
                    try {
                        do_text7 = (llenarDatosTabla.get(i).getCuotaCompensatoria().equals("") || llenarDatosTabla.get(i).getCuotaCompensatoria().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getCuotaCompensatoria());
                    } catch (NullPointerException e) {
                        do_text7 = 0;
                    }
                    cuotaCompensatoria += do_text7;
                    try {
                        do_text8 = (llenarDatosTabla.get(i).getTotal().equals("") || llenarDatosTabla.get(i).getTotal().isEmpty()) ? 0 : Double.parseDouble(llenarDatosTabla.get(i).getTotal());
                    } catch (NullPointerException e) {
                        do_text8 = 0;
                    }
                    total_devIva += do_text8;
                }

            }

            tablaIva = new DefaultTableModel(myData, titulos) {
                @Override
                public Class<?> getColumnClass(int column) { //DETERMINA SI LA COLUMNA SER√Å CHECKBOX (BOOLEAN) O TEXTO (STRING)
                    if (column == 0) {
                        return Boolean.class;
                    } else {
                        return String.class;
                    }
                }

                @Override
                public boolean isCellEditable(int row, int column) { //DETERMINA SI LA COLUMNA SE PODR√Å EDITAR
                    if (column == 0 || column == 9 || column == 10 || column == 11) { //NUMEROS DE COLUMNAS EMPEZANDO DESDE 0 QUE PODR√ÅN SER EDITADAS
                        return true;
                    } else {
                        return false;
                    }
                }
            };

            //Codigo que da la habilidad de ordenar los datos filtrados por orden seg√∫n lo quiera el cliente
            TableRowSorter<TableModel> ordenTabla = new TableRowSorter<>(tablaIva);
            tablaCienIvaAcred.setModel(tablaIva);
            tablaCienIvaAcred.setRowSorter(ordenTabla);

            //Codigo que permite cambiar el tama√±o de las columnas de una tabla seg√∫n se requiera
            TableColumn columna;
            for (int i = 1; i <= 21; i++) {
                switch (i) {
                    case 1:
                        //Fecha de Factura
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(130);
                        break;
                    case 2:
                        //Folio Factura
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(90);
                        break;
                    case 3:
                        //Folio UUID
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(250);
                        break;
                    case 4:
                        //Proveedor
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(400);
                        break;
                    case 5:
                        //RFC
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(120);
                        break;
                    case 6:
                        //Conceptos
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(500);
                        break;
                    case 7:
                        //Base 0%
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(60);
                        break;
                    case 8:
                        //BASE 16
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(70);
                        break;
                    case 9:
                        //Retencion 4%
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(70);
                        break;
                    case 10:
                        //Retencion 10%
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(70);
                        break;

                    case 11:
                        //Retencion 10.67%
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 12:
                        //CP
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(200);
                        break;
                    case 13:
                        //IVA
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 14:
                        //TOTAL
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(80);
                        break;
                    case 15:
                        //Fecha Pago
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 16:
                        //Cuenta de banco
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(200);
                        break;
                    case 17:
                        //Forma de Pago
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(120);
                        break;
                    case 18:
                        //Tipo Poliza
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(100);
                        break;
                    case 19:
                        //No. Poliza
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(80);
                        break;
                    case 20:
                        //Relacion de actividad
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 21:
                        //Cruce Edo Cuenta
                        columna = tablaCienIvaAcred.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;

                    default:
                        break;
                }

            }
            //llamar el llenado de tabla
            lb_100.setText("100% FACTURAS DE IVA ACREDITABLE");
            inicializarTablaTotalIva(base_0, base_16, retencion_4, retencion_10, retencion_1067, cuotaCompensatoria, totalIva, total_devIva);
        }
    }

    /**
     * Funcion que permite dar formato y valores a la tabla de totales
     *
     * @param base0
     * @param base16
     * @param retencion4
     * @param retencion10
     * @param retencion1016
     * @param cuotaCom
     * @param ivaT
     * @param totalDev
     */
    private void inicializarTablaTotalIva(double base0, double base16, double retencion4, double retencion10, double retencion1016, double cuotaCom, double ivaT, double totalDev) {
        defaultTableIva = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; //To change body of generated methods, choose Tools | Templates.
            }
        };
        DecimalFormat formateador = new DecimalFormat("0.00");

        String[] titulos = {"Base 0%", "Base 16%", "Retenci√≥n 4%", "Retenci√≥n 10%", "Retenci√≥n 10.67%", "Cuota Compensatoria", "IVA", "Total"};
        String[] valores = {String.valueOf(formateador.format(base0)), String.valueOf(formateador.format(base16)), String.valueOf(formateador.format(retencion4)),
            String.valueOf(formateador.format(retencion10)), String.valueOf(formateador.format(retencion1016)), String.valueOf(formateador.format(cuotaCom)),
            String.valueOf(formateador.format(ivaT)), String.valueOf(formateador.format(totalDev))};
        defaultTableIva.setColumnIdentifiers(titulos);
        defaultTableIva.addRow(valores);

//        TableColumn columna;
        tablaTotalIva.setModel(defaultTableIva);
//        for (int i = 0; i <= 3; i++) {
//            switch (i) {
//                case 0:
//                    //factura
//                    columna = tablaTotalIva.getColumn(titulos[i]);
//                    columna.setMinWidth(90);
//                    break;
//                case 1:
//                    //Fecha Factura
//                    columna = tablaTotalIva.getColumn(titulos[i]);
//                    columna.setMinWidth(90);
//                    break;
//                case 2:
//                    //#poliza
//                    columna = tablaTotalIva.getColumn(titulos[i]);
//                    columna.setMinWidth(40);
//                    break;
//                case 3:
//                    //Fecha Poliza
//                    columna = tablaTotalIva.getColumn(titulos[i]);
//                    columna.setMinWidth(50);
//                    break;
//                default:
//                    break;
//            }
//
//        }

    }

    /**
     * Funcion que permite solicitar y dibujar los datos de una carpeta xml de
     * manera manual y poder eliminar los que sean necesarios
     *
     * @param listaDatos
     */
    private void setTablaSeleccionManual(List<XmlDatos> listaDatos) {
        /*Ajustar columnas. La tabla de totales debe igual sobreescribirse*/
        xmlDatosList = new ArrayList<>();
        xmlDatosList = listaDatos;

        Object[][] datos = new Object[xmlDatosList.size()][17];

        // Esta lista contiene los nombres que se mostrar√°n en el encabezado de cada columna de la grilla
        String[] columnas = new String[]{"Marcar", "Fecha de Factura", "Folio Factura", "Folio UUID", "Proveedor", "RFC", "Concepto",
            "Base 0%", "Base 16%", "Retenci√≥n 4%", "Retenci√≥n 10%", "Retenci√≥n 10.67%", "Cuota Compensatoria", "IVA", "Total", "Forma de Pago", "Acci√≥n"};

        // Estos son los tipos de datos de cada columna de la lista
        final Class[] tiposColumnas = new Class[]{
            //marcador
            java.lang.Boolean.class,
            //Fecha de factura
            java.lang.String.class,
            //folio de factura
            java.lang.String.class,
            //folio UUID
            java.lang.String.class,
            //Proveedor
            java.lang.String.class,
            //RFC
            java.lang.String.class,
            //Concepto
            java.lang.String.class,
            //Concepto
            java.lang.String.class,
            //Base 0%
            java.lang.String.class,
            //Base 16%
            java.lang.String.class,
            //Retencion 4%
            java.lang.String.class,
            //retencion 10%
            java.lang.String.class,
            //Retencion 1067
            java.lang.String.class,
            //Cuota Compensatoria
            java.lang.String.class,
            //Iva
            java.lang.String.class,
            //Total Iva
            java.lang.String.class,
            //btn remover
            JButton.class // <- noten que aqu√≠ se especifica que la √∫ltima columna es un bot√≥n
        };

        // Agrego los registros que contendr√° la grilla.
        // Observen que el √∫ltimo campo es un bot√≥n
        for (int i = 0; i < xmlDatosList.size(); i++) {
            String string = xmlDatosList.get(i).getFechaFactura();
            String[] parts = string.split("T");
            String part1 = parts[0];
            String dateFormat = "";
            //No se estan cargando todos los datos
            try {
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(part1);
                dateFormat = new SimpleDateFormat("dd-MM-yyyy").format(date);

            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Hubo un problema al cargar la fecha: " + ex);
            }
            //HACER QUE SI SON NULOS, OBTENGAN UN NUEVO VALOR
            String folioInterno, folioFiscal, proveedor, rfc, concepto, b0, b16, r4, r10, r1016, cuota, iva, total, formaPago;
            folioInterno = (xmlDatosList.get(i).getFolioInterno() != null) ? xmlDatosList.get(i).getFolioInterno() : "";
            folioFiscal = (xmlDatosList.get(i).getFolioFiscal() != null) ? xmlDatosList.get(i).getFolioFiscal() : "";
            proveedor = (xmlDatosList.get(i).getProveedor() != null) ? xmlDatosList.get(i).getProveedor() : "";
            rfc = (xmlDatosList.get(i).getRfc() != null) ? xmlDatosList.get(i).getRfc() : " ";
            concepto = (xmlDatosList.get(i).getConceptoXml() != null) ? xmlDatosList.get(i).getConceptoXml() : "";
            b0 = (xmlDatosList.get(i).getBaseCero() != null) ? xmlDatosList.get(i).getBaseCero() : "";
            b16 = (xmlDatosList.get(i).getBase16() != null) ? xmlDatosList.get(i).getBase16() : "";
            r4 = (xmlDatosList.get(i).getRetencionCuatro() != null) ? xmlDatosList.get(i).getRetencionCuatro() : "";
            r10 = (xmlDatosList.get(i).getRetencionDiez() != null) ? xmlDatosList.get(i).getRetencionDiez() : "";
            r1016 = (xmlDatosList.get(i).getRetencion1016() != null) ? xmlDatosList.get(i).getRetencion1016() : "";
            cuota = (xmlDatosList.get(i).getCuotaCompensatoria() != null) ? xmlDatosList.get(i).getCuotaCompensatoria() : "";
            iva = (xmlDatosList.get(i).getIva() != null) ? xmlDatosList.get(i).getIva() : "";
            total = (xmlDatosList.get(i).getTotal() != null) ? xmlDatosList.get(i).getTotal() : "";
            formaPago = (xmlDatosList.get(i).getFormaPago() != null) ? xmlDatosList.get(i).getFormaPago() : "";

            datos[i][0] = false;
            datos[i][1] = dateFormat;
            datos[i][2] = folioInterno;
            datos[i][3] = folioFiscal;
            datos[i][4] = proveedor;
            datos[i][5] = rfc;
            datos[i][6] = concepto;
            datos[i][7] = b0;
            datos[i][8] = b16;
            datos[i][9] = r4;
            datos[i][10] = r10;
            datos[i][11] = r1016;
            datos[i][12] = cuota;
            datos[i][13] = iva;
            datos[i][14] = total;
            datos[i][15] = formaPago;
            datos[i][16] = new JButton("Remover");
        }

        // Defino el TableModel y le indico los datos y nombres de columnas
        tabla_ManualCarga.setModel(new javax.swing.table.DefaultTableModel(
                datos,
                columnas) {
            // Esta variable nos permite conocer de antemano los tipos de datos de cada columna, dentro del TableModel
            Class[] tipos = tiposColumnas;

            @Override
            public Class getColumnClass(int columnIndex) {
                // Este m√©todo es invocado por el CellRenderer para saber que dibujar en la celda,
                // observen que estamos retornando la clase que definimos de antemano.
                return tipos[columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                // Sobrescribimos este m√©todo para evitar que la columna que contiene los botones sea editada.
                return !(this.getColumnClass(column).equals(JButton.class));
            }
        });

        // El objetivo de la siguiente l√≠nea es indicar el CellRenderer que ser√° utilizado para dibujar el bot√≥n
        tabla_ManualCarga.setDefaultRenderer(JButton.class, (JTable jtable, Object objeto, boolean estaSeleccionado, boolean tieneElFoco, int fila, int columna) -> (Component) objeto /**
         * Observen que todo lo que hacemos en √©ste m√©todo es retornar el objeto
         * que se va a dibujar en la celda. Esto significa que se dibujar√° en la
         * celda el objeto que devuelva el TableModel. Tambi√©n significa que
         * este renderer nos permitir√≠a dibujar cualquier objeto gr√°fico en la
         * grilla, pues retorna el objeto tal y como lo recibe.
         */
        );

        /**
         * Por √∫ltimo, agregamos un listener que nos permita saber cuando fue
         * pulsada la celda que contiene el bot√≥n. Noten que estamos capturando
         * el clic sobre JTable, no el clic sobre el JButton. Esto tambi√©n
         * implica que en lugar de poner un bot√≥n en la celda, simplemente
         * pudimos definir un CellRenderer que hiciera parecer que la celda
         * contiene un bot√≥n. Es posible capturar el clic del bot√≥n, pero a mi
         * parecer el efecto es el mismo y hacerlo de esta forma es m√°s "simple"
         */
        tabla_ManualCarga.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = tabla_ManualCarga.rowAtPoint(e.getPoint());
                int columna = tabla_ManualCarga.columnAtPoint(e.getPoint());

                /**
                 * Preguntamos si hicimos clic sobre la celda que contiene el
                 * bot√≥n, si tuvi√©ramos m√°s de un bot√≥n por fila tendr√≠amos que
                 * adem√°s preguntar por el contenido del bot√≥n o el nombre de la
                 * columna
                 */
                if (tabla_ManualCarga.getModel().getColumnClass(columna).equals(JButton.class)) {
                    /**
                     * Aqu√≠ pueden poner lo que quieran, para efectos de este
                     * ejemplo, voy a mostrar en un cuadro de dialogo todos los
                     * campos de la fila que no sean un bot√≥n.
                     */
                    for (int i = 0; i < tabla_ManualCarga.getModel().getColumnCount(); i++) {
                        if (!tabla_ManualCarga.getModel().getColumnClass(i).equals(JButton.class)) {
                            //sb.append("\n").append(tabla_ManualCarga.getModel().getColumnName(i)).append(": ").append(tabla_ManualCarga.getModel().getValueAt(fila, i));
                            try {
                                DefaultTableModel dtm = (DefaultTableModel) tabla_ManualCarga.getModel(); //TableProducto es el nombre de mi tabla ;)
                                dtm.removeRow(tabla_ManualCarga.getSelectedRow());
                            } catch (ArrayIndexOutOfBoundsException ex) {

                            }

                        }
                    }

                }
            }
        });
    }


    /*
    ################FINALIZA###################
    Funciones: 100% iva acred
     */
 /*
    ################INICIA###################
    Funciones: Auxiliar Iva Acred
     */
    /**
     * Funcion que solicita y carga los datos de auxiliar iva acred
     *
     * @param numMes
     * @param mes
     * @param anio
     * @param numEmpresa
     */
    private void inicializarAuxIvaAcred(String numMes, int mes, int anio, int numEmpresa) {
        tablaIva = new DefaultTableModel();
        //Titulos para la tabla
        String[] titulos = {"Tipo P√≥liza", "N√∫mero P√≥liza", "Fecha", "Concepto", "Debe", "Haber"};
        totalAuxCred = 0;
        //Ingresando titulos
        tablaIva.setColumnIdentifiers(titulos);
        //Clase que obtiene los datos xml
        AuxIvaAcredController auxController = new AuxIvaAcredController();
        DecimalFormat formateador = new DecimalFormat("####.##");
        listAuxIvaAcreds = auxController.solicitudAuxIvaAcred(mes, anio, numEmpresa);
        if (!listAuxIvaAcreds.isEmpty()) {
            for (int i = 0; i < listAuxIvaAcreds.size(); i++) {
                String stringDate = listAuxIvaAcreds.get(i).getFecha();
                String newDate = "";
                if (stringDate != null) {
                    try {
                        Date date = new SimpleDateFormat("yyyy-MM-dd").parse(stringDate);
                        newDate = new SimpleDateFormat("dd-MM-yyyy").format(date);

                    } catch (ParseException ex) {
                        JOptionPane.showMessageDialog(this, "Hubo un problema al cargar la fecha: " + ex);
                    }
                }

                tablaIva.addRow(new Object[]{listAuxIvaAcreds.get(i).getTipoPoliza(), listAuxIvaAcreds.get(i).getNoPoliza(), newDate, listAuxIvaAcreds.get(i).getConcepto(),
                    formateador.format(listAuxIvaAcreds.get(i).getDebe()), formateador.format(listAuxIvaAcreds.get(i).getHaber())});
                totalAuxCred += listAuxIvaAcreds.get(i).getDebe();

            }
            TableRowSorter<TableModel> ordenTabla = new TableRowSorter<>(tablaIva);
            tabla_ivaAuxAcred.setModel(tablaIva);
            tabla_ivaAuxAcred.setRowSorter(ordenTabla);
            //Codigo que da la habilidad de ordenar los datos filtrados por orden seg√∫n lo quiera el cliente
            //Codigo que permite cambiar el tama√±o de las columnas de una tabla seg√∫n se requiera
            TableColumn columna;
            for (int i = 0; i < 6; i++) {
                switch (i) {
                    case 0:
                        //Tipo Poliza
                        columna = tabla_ivaAuxAcred.getColumn(titulos[i]);
                        columna.setMinWidth(90);
                        break;
                    case 1:
                        //Numero Poliza
                        columna = tabla_ivaAuxAcred.getColumn(titulos[i]);
                        columna.setMinWidth(100);
                        break;
                    case 2:
                        //Fecha
                        columna = tabla_ivaAuxAcred.getColumn(titulos[i]);
                        columna.setMinWidth(100);
                        break;
                    case 3:
                        //Concepto
                        columna = tabla_ivaAuxAcred.getColumn(titulos[i]);
                        columna.setMinWidth(800);
                        break;
                    case 4:
                        //Debe
                        columna = tabla_ivaAuxAcred.getColumn(titulos[i]);
                        columna.setMinWidth(100);
                        break;
                    case 5:
                        //Haber
                        columna = tabla_ivaAuxAcred.getColumn(titulos[i]);
                        columna.setMinWidth(100);
                        break;

                    default:
                        break;
                }

            }
            lbT_mesAuxIvaAcred.setText("IVA ACREDITABLE: " + numMes.toUpperCase() + " " + anio);
        }
    }

    /**
     * Funcion que calcula el total global de retencion 100 de acred
     *
     * @param mes
     * @param anio
     * @param total_cien
     */
    private void inicializarTablaTotalAuxAcred(String mes, int anio, double total_cien) {
        tablaIva = new DefaultTableModel();
        String[] titulos = {"", "Descripci√≥n", "Totales"};
        tablaIva.setColumnIdentifiers(titulos);
        String complementoCadena = "IVA RETENIDO EN DICIEMBRE Y ENTERADO EN " + mes.toUpperCase() + " " + anio;
        DecimalFormat formateador = new DecimalFormat("####.##");
        tablaIva.addRow(new Object[]{"", "TOTAL AL 100% DE IVA ACREDITABLE", formateador.format(total_cien)});
        tablaIva.addRow(new Object[]{"MAS", complementoCadena, formateador.format(0)});
        tablaIva.addRow(new Object[]{"", "IVA RETENIDO POR CLIENTES EN EL PERIODO", formateador.format(0)});
        tablaIva.addRow(new Object[]{"IGUAL", "", ""});
        tablaIva.addRow(new Object[]{"", "TOTAL DE IVA ACREDITABLE DEL PERIODO", formateador.format(total_cien)});
        tablaIva.addRow(new Object[]{"MENOS", "", ""});
        tablaIva.addRow(new Object[]{"", "IVA CAUSADO Y COBRADO A CLIENTES EN EL PERIODO", formateador.format(0)});
        tablaIva.addRow(new Object[]{"IGUAL", "", ""});
        tablaIva.addRow(new Object[]{"", "SALDO A FAVOR DEL PERIODO SUJETO A DEVOLUCION", formateador.format(0)});
        table_totalAuxIvaAcred.setModel(tablaIva);

    }

    /*
    ################FINALIZA###################
    Funciones: AUXILIAR IVA ACRED bateria 14:43 15:03 (con musica)
     */
 /*
    ################INICIA###################
    Funciones: RETENCION IVA MES
     */
    private void inicializarTablaRetencionIvaMes(String numMes, int mes, int anio, int numEmpresa) {
        tablaIva = new DefaultTableModel();
        String[] titulos = {"P√≥liza", "", "Fecha", "Concepto", "RFC Proveedor", "Concepto Gasto", "SubTotal 16%", "Iva Acreditable 16%", "Otros Conceptos Base", "Importe Retenido", "Total Pagado", "Factura"};
        //Ingresando titulos
        tablaIva.setColumnIdentifiers(titulos);
        controllerAction = new ControllerAction();
        DecimalFormat formateador = new DecimalFormat("####.##");
        // Esto sale en pantalla con dos decimales, es decir, 3,43
        listRetencionIvaMeses = controllerAction.solicitudRetencionesIvaMes(mes, anio, numEmpresa);
        if (!listRetencionIvaMeses.isEmpty()) {
            for (int i = 0; i < listRetencionIvaMeses.size(); i++) {
                String stringDate = listRetencionIvaMeses.get(i).getFecha();
                String newDate = "";

                try {
                    Date date = new SimpleDateFormat("yyyy-MM-dd").parse(stringDate);
                    newDate = new SimpleDateFormat("dd-MM-yyyy").format(date);

                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(this, "Hubo un problema al cargar la fecha: " + ex);
                }

                tablaIva.addRow(new Object[]{listRetencionIvaMeses.get(i).getTipoPoliza(), listRetencionIvaMeses.get(i).getPolCombinada().trim(), newDate, listRetencionIvaMeses.get(i).getConcepto(), "RFC:PENDIENTE",
                    "Concepto Gasto:PENDIENTE", "SubTotal:PENDIENTE", "Iva Acreditable:PENDIENTE", listRetencionIvaMeses.get(i).getConceptosBase(), "Importe Retenido:PENDIENTE", "Total Pagado:PENDIENTE",
                    "Factura:PENDIENTE"});

            }
            TableRowSorter<TableModel> ordenTabla = new TableRowSorter<>(tablaIva);
            tabla_RIM.setModel(tablaIva);
            tabla_RIM.setRowSorter(ordenTabla);
            TableColumn columna;
            for (int i = 0; i < 12; i++) {
                switch (i) {
                    case 0:
                        //Poliza
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(50);
                        break;
                    case 1:
                        //PolizaCombinada
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(35);
                        break;
                    case 2:
                        //Fecha
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(80);
                        break;
                    case 3:
                        //Concepto
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(600);
                        break;
                    case 4:
                        //RFC
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 5:
                        //Concepto Gasto
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(300);
                        break;
                    case 6:
                        //SubTotal
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 7:
                        //Iva Acreditable
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(90);
                        break;
                    case 8:
                        //Otros conceptos
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(300);
                        break;
                    case 9:
                        //Importe Retenido
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 10:
                        //Total pagado
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 11:
                        //Factura
                        columna = tabla_RIM.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    default:
                        break;
                }

            }
            lb_RIM.setText("DETALLE DE IVA RETENIDO DEL MES DE: " + numMes.toUpperCase() + " " + anio);
        }
    }

    /*
    ################FINALIZA###################
    Funciones: RETENCION IVA MES
     */
 /*
    ################INICIA###################
    Funciones: RETENCION IVA MES
     */
    private void inicializarTablaRetencionIvaMesPagadas(String numMes, int mes, int anio, int numEmpresa) {
        tablaIva = new DefaultTableModel();
        String[] titulos = {"P√≥liza", "", "Fecha", "Concepto", "RFC Proveedor", "Concepto Gasto", "SubTotal 16%", "Iva Acreditable 16%", "Otros Conceptos Base", "Importe", "Total Pagado", "Factura"};
        //Ingresando titulos
        tablaIva.setColumnIdentifiers(titulos);
        controllerAction = new ControllerAction();
        DecimalFormat formateador = new DecimalFormat("####.##");
        // Esto sale en pantalla con dos decimales, es decir, 3,43
        listRetencionIvaPagadaMes = controllerAction.solicitudRetencionesIvaMesPagada(mes, anio, numEmpresa);
        if (!listRetencionIvaPagadaMes.isEmpty()) {
            for (int i = 0; i < listRetencionIvaPagadaMes.size(); i++) {
                String stringDate = listRetencionIvaPagadaMes.get(i).getFecha();
                String newDate = "";

                try {
                    Date date = new SimpleDateFormat("yyyy-MM-dd").parse(stringDate);
                    newDate = new SimpleDateFormat("dd-MM-yyyy").format(date);

                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(this, "Hubo un problema al cargar la fecha: " + ex);
                }

                tablaIva.addRow(new Object[]{listRetencionIvaPagadaMes.get(i).getTipoPoliza(), listRetencionIvaPagadaMes.get(i).getPolCombinada().trim(), newDate, listRetencionIvaPagadaMes.get(i).getConcepto(), "RFC:PENDIENTE",
                    "Concepto Gasto:PENDIENTE", "SubTotal:PENDIENTE", "Iva Acreditable:PENDIENTE", listRetencionIvaPagadaMes.get(i).getConceptosBase(), "Importe Retenido:PENDIENTE", "Total Pagado:PENDIENTE",
                    "Factura:PENDIENTE"});

            }
            TableRowSorter<TableModel> ordenTabla = new TableRowSorter<>(tablaIva);
            tabla_RetIvaMesPagada.setModel(tablaIva);
            tabla_RetIvaMesPagada.setRowSorter(ordenTabla);
            TableColumn columna;
            for (int i = 0; i < 12; i++) {
                switch (i) {
                    case 0:
                        //Poliza
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(50);
                        break;
                    case 1:
                        //PolizaCombinada
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(35);
                        break;
                    case 2:
                        //Fecha
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(80);
                        break;
                    case 3:
                        //Concepto
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(600);
                        break;
                    case 4:
                        //RFC
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 5:
                        //Concepto Gasto
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(300);
                        break;
                    case 6:
                        //SubTotal
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 7:
                        //Iva Acreditable
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(90);
                        break;
                    case 8:
                        //Otros conceptos
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(300);
                        break;
                    case 9:
                        //Importe Retenido
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 10:
                        //Total pagado
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    case 11:
                        //Factura
                        columna = tabla_RetIvaMesPagada.getColumn(titulos[i]);
                        columna.setMinWidth(150);
                        break;
                    default:
                        break;
                }

            }
            lb_RIPM.setText("DETALLE DE IVA RETENIDO PAGADO DEL MES DE: " + numMes.toUpperCase() + " " + anio);
        }
    }

    /*
    ################FINALIZA###################
    Funciones: RETENCION IVA MES
     */
 /*
    ################INICIA###################
    Funciones: AUXILIAR DE DEPOSITOS
     */
    private void inicializarTablaAuxDepositos() {
        tablaIva = new DefaultTableModel();
        String[] titulos = {"Fecha", "Concepto", "Debe"};
        //Ingresando titulos
        tablaIva.setColumnIdentifiers(titulos);
    }

    /**
     * Metodo que preconfigura el dise√±o del jframe, posicion, tama√±o, etc.
     */
    private void preConfiguracion() {
        //Posicion del jframe
        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
        int height = pantalla.height;
        int width = pantalla.width;
        this.setSize(width / 2, height / 2);
        this.setLocationRelativeTo(null);
        panelBusquedaManual.setVisible(false);
        btnOk.setEnabled(false);
        btnDelete.setEnabled(false);
    }

    public void comboBoxColuma_relacion(JTable table,
            TableColumn sportColumn, int empresa) {
        //Set up the editor for the sport cells.
        JComboBox comboBox = new JComboBox();
        ivaAcred = new IvaAcredController();
        List<String> tiposConceptos = ivaAcred.obtenerConceptosRelacion(empresa);
        if (!tiposConceptos.isEmpty()) {
            for (int i = 0; i < tiposConceptos.size(); i++) {
                comboBox.addItem(tiposConceptos.get(i));
            }
        }
//        comboBox.addItem("Snowboarding");
//        comboBox.addItem("Rowing");
//        comboBox.addItem("Knitting");
//        comboBox.addItem("Speed reading");
//        comboBox.addItem("Pool");
//        comboBox.addItem("None of the above");

        sportColumn.setCellEditor(new DefaultCellEditor(comboBox));

        //Set up tool tips for the sport cells.
        DefaultTableCellRenderer renderer
                = new DefaultTableCellRenderer();
        renderer.setToolTipText("Click for combo box");
        sportColumn.setCellRenderer(renderer);
    }

    public void comboBoxColumaCruceCta(JTable table,
            TableColumn sportColumn) {
        //Set up the editor for the sport cells.
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("Dr");
        comboBox.addItem("Eg");
        comboBox.addItem("Ig");
        comboBox.addItem("Tr");

        sportColumn.setCellEditor(new DefaultCellEditor(comboBox));

        //Set up tool tips for the sport cells.
        DefaultTableCellRenderer renderer
                = new DefaultTableCellRenderer();
        renderer.setToolTipText("Click for combo box");
        sportColumn.setCellRenderer(renderer);
    }

    /*
    ################FINALIZA###################
    Funciones: AUXILIAR DE DEPOSITOS
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jfGlobal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jfGlobal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jfGlobal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jfGlobal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jfGlobal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelAction;
    private javax.swing.JPanel PanelTabla;
    private javax.swing.JScrollPane ScrollTotalIva;
    private javax.swing.JScrollPane SpIva;
    private javax.swing.JScrollPane SpIva1;
    private javax.swing.JScrollPane SpIva3;
    private javax.swing.JScrollPane SpIva4;
    private javax.swing.JButton btnAIA;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExcelCienAcred;
    private javax.swing.JButton btnExcelRIM;
    private javax.swing.JButton btnExcelRIMP;
    private javax.swing.JButton btnExitPanel;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnProcesarIva;
    private javax.swing.JButton btnXmlCargar;
    private com.toedter.calendar.JYearChooser calendarAnio;
    private com.toedter.calendar.JMonthChooser calendarMes;
    private javax.swing.JComboBox<String> combo_Empresa;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbT1;
    private javax.swing.JLabel lbT_mesAuxIvaAcred;
    private javax.swing.JLabel lb_100;
    private javax.swing.JLabel lb_RIM;
    private javax.swing.JLabel lb_RIPM;
    private javax.swing.JPanel panelBusquedaManual;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JPanel panel_AT_16;
    private javax.swing.JPanel panel_AT_Cero;
    private javax.swing.JPanel panel_AuxDep;
    private javax.swing.JPanel panel_AuxDepositos;
    private javax.swing.JPanel panel_Aux_IA;
    private javax.swing.JPanel panel_CabecerAuxIva;
    private javax.swing.JPanel panel_Cien_FIA;
    private javax.swing.JPanel panel_Det_Iva_Favor;
    private javax.swing.JPanel panel_Filtro;
    private javax.swing.JPanel panel_RIM;
    private javax.swing.JPanel panel_RIPM;
    private javax.swing.JPanel panel_RelacionDep;
    private javax.swing.JPanel panel_RetIvaMes1;
    private javax.swing.JPanel panel_TablaIvaAcred;
    private javax.swing.JPanel panel_contenidoGlobal;
    private javax.swing.JPanel panel_dataIvaAcred;
    private javax.swing.JPanel panel_detRIM;
    private javax.swing.JPanel panel_resultIvaAcred;
    private javax.swing.JTable tablaCienIvaAcred;
    private javax.swing.JTable tablaTotalIva;
    private javax.swing.JTable tabla_AuxDepositos;
    private javax.swing.JTable tabla_ManualCarga;
    private javax.swing.JTable tabla_RIM;
    private javax.swing.JTable tabla_RetIvaMesPagada;
    private javax.swing.JTable tabla_ivaAuxAcred;
    private javax.swing.JTable table_totalAuxIvaAcred;
    private javax.swing.JTabbedPane tp_Secciones;
    // End of variables declaration//GEN-END:variables
}
